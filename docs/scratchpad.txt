*** TODO: I am being very inconsistent about frontend, backend, client,
*** worker... If I am to expect anyone to be able to follow along I'm going
*** to have to come up with a consistent dictionary. 


While writing documentation to build against I'll have ideas for things that
should be documented better later. That's what this file is for.

[ PROTOCOL ]
CHECKCONFIG: When intiating a new connection the client must validate it's
             config.
    Options:
        config_type:     
            The format the client accepts the config in. Can be JSON, XML
            or ZFL.

        config_version:
            The version of config the client has on record.

If the application already has a config, it will also pass a configversion
option.

CONFIG - Broker reply with configuration. Type will be specified as part of
the request.

NEEDBROKER - In the event that a client is unable to connect to it's prefered
broker, it may try to connect to another one with a NEEDBROKER request. This
will include the client identity and services offered. 

*** The broker group will then need to determine if thers is a problem, or
route the client to a new broker, setting it as it's preferred broker. If
there is an issue with a broker and it's restarted maybe it should connect
the client to tell it to switch back? ****

READY: This tells the Broker that the worker client is availble for new
       connections. It's at this point that the client is added to the 
       LRU queue. 
    Options:
        services:
            Services the client accepts requests for.

        heartbeat_interval:
            The interval at which the broker can expect heartbeat requests
            from the client. 

        time: The current client time.

        config_version: The version of config running on the client.

READYOK: This is a reply to a READY request, it is the acknowledgement from
    broker so that the client knows the broker is working correctly.

PING: This is the standard heartbeat request.
    Options:
        time:
            Time according to client when heartbeat request was sent.
            If this is way off from the time on the server, then there
            is a problem and an error will be returned while the client
            will be disconnected.

        config_version: 
            Configuration version. Heavy to include, but will help ensure
            clients are running against the current configuration.

PONG: This is the response to PING
    Options:
        time:
            Time according to client when heartbeat request was sent.
            If this is way off from the time on the server, then there
            is a problem and an error will be returned while the client
            will be disconnected.

        config_version: 
            Configuration version. Heavy to include, but will help ensure
            clients are running against the current configuration.

WORKREQUEST: This is the request asking a client to do some work. This
    will remove the worker from the LRU queue and add it to the wait queue.

    *** Need to plug in how wait queue will work. Maybe this is a good time
    *** to think about implementing the binary star pattern as an option.
    *** Optionally brokers could have fallbacks. I think this should be
    *** hard configured with each broker, that broker responsible for keeping
    *** it's fallback server up to date. Meaning the fallback broker won't
    *** subscribe to group ports unless it's activated.


    Options:
        time:
            Time according to client when heartbeat request was sent.
            If this is way off from the time on the server, then there
            is a problem and an error will be returned while the client
            will be disconnected.

        config_version: 
            Configuration version. Heavy to include, but will help ensure
            clients are running against the current configuration.

        work_request_indentifier: This will be the identity of the frontend
            that made the request and the message id, used for routing.

        body: The body of the request. This is service dependent, Scale0 does
            not have interest in the data herein.

WORKREPLY: This is the reply to a work request. The broker won't care about any
    errors about the work request, it will be up to the frontend to manage that.

DISCONNECTERROR:
    Returned to clients when they are disconnected for an error. Properties
    are
        Error Code: *** thinking I should see if standard http error codes
                    will be a good fit. ***

        Error Message: Pretty error message to send to client.

FORCENEGOTIATE:
    Sent by broker to client in the event the broker isn't sure if the client
    is in an acceptable state. Upon getting this message from a broker a client
    should initiate CHECKCONFIG.

[ CONNECTIONS ]

Examples of connections to wrap my head around how they work.
C = client
B = broker

 - Client startup, broker down:
* client must be informed of a broker to connect to. If it's saving it's config
* locally it may remember, and also have the group information to fallback on
* to find a new broker. This will be encouraged for clients, but not required.

C --- CHECKCONFIG ---> B
No response from B, client fails to start with error.

 - Client startup, broker up
* client must be informed of a broker to connect to. If it's saving it's config
* locally it may remember, and also have the group information to fallback on
* to find a new broker. This will be encouraged for clients, but not required.

C --- CHECKCONFIG ---> B
B --- CONFIG ---> C
C --- READY ---> B
B --- READYOK ---> C
* It's at this point that the broker registers the client in the LRU queue.

