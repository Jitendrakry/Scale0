While writing documentation to build against I'll have ideas for things that
should be documented better later. That's what this file is for.

[ PROTOCOL ]
CHECKCONFIG: When intiating a new connection the client must validate it's
             config.
    Options:
        config_type:     
            The format the client accepts the config in. Can be JSON, XML
            or ZFL.

        config_version:
            The version of config the client has on record.

If the application already has a config, it will also pass a configversion
option.

CONFIGACK - Broker reply when CHECKCONFIG version request matches the version
on the broker.

CONFIG - Broker reply with configuration. Type will be specified as part of
the request.

READY: This tells the Broker that the worker client is availble for new
       connections. It's at this point that the client is added to the 
       LRU queue. 
    Options:
        services:
            Services the client accepts requests for.

        heartbeat:
            If the client supports heartbeat. Clients that block
            during processing may not support heartbeat. The
            recommendation will be to always support heartbeat.

        hbeatinterval:
            The interval at which the broker can expect heartbeat requests
            from the client.

        time: The current client time.

        config_version: The version of config running on the client.

HEARTBEAT: This is the standard heartbeat request.
    Options:
        time:
            Time according to client when heartbeat request was sent.
            If this is way off from the time on the server, then there
            is a problem and an error will be returned while the client
            will be disconnected.

        config_version: 
            Configuration version. Heavy to include, but will help ensure
            clients are running against the current configuration.

MANAGEMENTREQ: Management requests are commands. They are bundled under this
    flag to make auth checks quicker.

    Options:
        auth_id: id for auth requests

        auth_password: Password for auth request

        command: One of the following. disable, enable, reload_config

DISCONNECTERROR:
    Returned to clients when they are disconnected for an error. Properties
    are
        Error Code: *** thinking I should see if standard http error codes
                    will be a good fit. ***

        Error Message: Pretty error message to send to client.

FORCENEGOTIATE:
    Sent by broker to client in the event the broker isn't sure if the client
    is in an acceptable state. Upon getting this message from a broker a client
    should initiate CHECKCONFIG.

[ BROKER CONFIG ]
This details all the information a brokers require for operation. Not all
options need to be pushed to clients. What options are required for clients
will be detailed later.

frontend_port: 
    The port on which frontends connect.

backend_port: 
    The port on which backends connect.

config_pub_port:
    The port on which this broker publishes new configurations.

config_sub_ports:
    The port(s) on which the broker listens for new configurations.

    *** The idea here is that everything, when possible, should listen for
    configuration changes from more than one source in order to provide
    reliability and redundancy. ****

state: joining, active, disabled
    joining is the default state when adding a broker to the network. Once
    it's received it's config it will go to an active state. Brokers can
    also be disabled. In a disabled state they will provide no response to
    requests except for a management request to re-enable.

peers: List of peer sockets to communicate with. This is the port used for
    heartbeat and work status communication.

default_heartbeat_interval:
    Clients can negotiate a longer heartbeat interval, but not a shorter one.

services: 
    list of services managed by the broker, or all

LRU:
    The least recently used list which will be a list of backends serviced by
    the broker. Each item on the list will have the following properties
        services: list of services the backend supports
        last_heartbeat: used to determine if the backend is alive or not.

error_clients:
    If due to a configuration issue or some other problem a client is
    repeatedly not negotiating correctly a client can be ignoredas much
    as is possible with zeromq. 
