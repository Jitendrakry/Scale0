Keeping the configuration within the environment up to date. The premise
that this system is built on is that for the most part the config will be
stable. That is new brokers and Workers will not be added and removed
a lot, and config changes by admins will be rare.

When a config change is made, it will be sent on the PUB/SUB config
network. All brokers with the config service can PUB. All brokers should
have a SUB port on all brokers with the config service. 

On receipt of a config, it will check the version with it's running version.
If they are different it will update it's config. If it's the same it will
check the hash of it's config against the published one. 

*** Not sure what to do if the hashes don't match yet. Conflict resolution
could happen here and then it could push. Conflict resolution measures could
be a bit complicated though. ***

[ WORKER CONFIG ]
This is config that each worker stores. Both identity and services should
be sent with a CHECKCONFIG request.

identity:
    unique identifier for this Worker

services:
    List of services processed by the Worker.

family_config:
    config (including fallback family config) for family

prefered_broker: 
    This is the broker that the Worker should attempt to connect to.
    If it is unable to connect to this broker it should send a NEEDBROKER
    request to another broker in the family_config if any exist.


[ BROKER CONFIG ]
This details all the information a brokers require for operation. Not all
options need to be pushed to Workers. What options are required for Workers
is detailed in the [ Worker CONFIG ] section above.

identity:
    unique identifier for this broker

frontend_port: 
    The port on which frontends connect.

backend_port: 
    The port on which backends connect.

config_pub_port:
    The port on which this broker publishes new configurations.

config_sub_ports:
    The port(s) on which the broker listens for new configurations.

    *** The idea here is that everything, when possible, should listen for
    configuration changes from more than one source in order to provide
    reliability and redundancy. ****

state: joining, active, disabled
    joining is the default state when adding a broker to the network. Once
    it's received it's config it will go to an active state. Brokers can
    also be disabled. In a disabled state they will provide no response to
    requests except for a management request to re-enable.

peers: List of peer sockets to communicate with. This is the port used for
    heartbeat and work status communication.

default_heartbeat_interval:
    Workers can negotiate a longer heartbeat interval, but not a shorter one.

services: 
    list of services managed by the broker, or all

LRU:
    The least recently used list which will be a list of backends serviced by
    the broker. Each item on the list will have the following properties
        services: list of services the backend supports
        last_heartbeat: used to determine if the backend is alive or not.

error_Workers:
    If due to a configuration issue or some other problem a Worker is
    repeatedly not negotiating correctly a Worker can be ignored as much
    as is possible with zeromq. 

family:
    This option may be blank, if families aren't used in the network. Otherwise
    this is a single item for the family a broker is a member of.

fallback_families:
    While a broker may be a member of only one family, it can have several
    fallback families. Fallback families are used to route Workers to in the event
    that the primary family is unable to process it's request.

family_config:
    This is a list of family configs. The Broker should have it's own family
    config plus any fallback family configs as well. See [ FAMILY CONFIG ]
    below for family config options.

[ FAMILY CONFIG ]

name:
    Unique name for the family.

brokers:
    List of brokers in the family. Includes:
        identity: broker identity
        services: services served by broker
        config_sub_port: Port to subscribe to for config updates 

admins:
    List of username and 1 way hashed passwords used for administration of the
    family.
