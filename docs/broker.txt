The broker is the core of the Scale0 project. It provides the application
logic and standards for peer and client connections. 

Every attempt is made to stay in accord with any standards that exist
on the zeromq website, [ url goes here, working offline right now ]. The
other issues Scale0 offers solutions for are reliability, scalability and
mangement flexibility.

ARCHITECTURE
*** This design is going to make me need to go back over everything I've
*** already typed up. Thought of this today while at work, and I think it
*** should simplify the broker implementation.

*** The language of choice to developer this initially is Python. As such
*** I'll be using the multiprocessing library to get around the Global
*** Interpreter Lock. In other languages it may be possible to use threads,
*** and take advantage of inproc://, though from what I've read this may not
*** be the best idea. In Python's case, wasn't really an option so there will
*** be the ipc:// overhead.
***
*** ipc:// might be the overall better answer, the guide even has a comment
*** premature optimization. Anyway, I've put too much time into this for now
*** without writing any code. And some point I have to come up with an idea
*** and either prove or disprove it with code.

Brokers will have two parts, Dispatchers and Routers. ( I'm not sold on the
name Dispatcher yet, because it will do more ). At a minimum each Broker will
consume 2 processes. While it could be written to only consume 1, forcing a 2
process minimum will be easier, and consuming only a single core would really
only be useful for dev/test implementations.

Dispatcher - The Dispatcher is what will provide the ports Clients and Workers
connect to and maintain communication with other peers. The Dispatcher will
manage all configuration related tasks and will push all router/worker
requests down to Router threads.

Router - Router processes send Tasks to Workers, and send the Task Reply back
to the Dispatcher who sends it Client who made the request.

The startup process for a broker will look like this.
 - Dispatcher ioloop started.
 - Dispatcher ioloop connects to any Peers and validates it's config.
 - Dispatcher binds an ipc PUSH socket.
 - Dispatcher kicks off Router processes with their own ioloops.
 - Each router ioloop established a PULL socket to the Dispatcher PUSH.
 - Dispatcher validates Routers are connected.
 - Dispatcher creates a zmq_context and binds the Worker XREP socket. 
* somehow that context is passed to Workers? Need to mess around with this part
 - Dispatcher waits for Workers to connect, outputs to console as they do.
 - Once config option for minimum workers is reached, Dispatcher creates a
    zmq_context for the Clients and binds an XREP socket to it
* somehow that context is passed to Workers? Need to mess around with this part
 - At this point the Broker is operational and passing messages.


SERVICES

Scale0 brokers will provide the following services:

Service Discovery: In order to meet the requirements of being service
agnostic, service discovery will need to be built in. Worker clients will
be able to state the serivce(s) they provide on connection to the network
and change that configuration realtime. Other core services will be built
on this framework. This is handled by the Dispatcher.

Configuration: A peer or client on startup should only need to be informed
of at least one broker to connect to. It will the request the configuration
it needs on startup. Not all brokers will be required to provide 
configuration services. However, at least one server per network will need
to provide the service. This is handled by the Dispatcher.

Heartbeat: Heartbeat will be the way that clients and peers are monitored
for availability. This will also be used to keep a configuration up to
date on configuration service brokers. Heartbeat service servers can be
configured to share their heartbeat table with other peers using push or
pull. For example, in a active/standby peer topology the master can receive
all heartbeart information and share it with the standby. Pull can be used
by peers requesting information about available workers clients. These
requests wil be recieved by the Dispatcher and passed to Routers like any
other Task.

CONFIGURATION
